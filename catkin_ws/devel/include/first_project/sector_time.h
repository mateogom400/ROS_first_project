// Generated by gencpp from file first_project/sector_time.msg
// DO NOT EDIT!


#ifndef FIRST_PROJECT_MESSAGE_SECTOR_TIME_H
#define FIRST_PROJECT_MESSAGE_SECTOR_TIME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace first_project
{
template <class ContainerAllocator>
struct sector_time_
{
  typedef sector_time_<ContainerAllocator> Type;

  sector_time_()
    : current_sector(0)
    , current_sector_time(0.0)
    , current_sector_mean_speed(0.0)  {
    }
  sector_time_(const ContainerAllocator& _alloc)
    : current_sector(0)
    , current_sector_time(0.0)
    , current_sector_mean_speed(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _current_sector_type;
  _current_sector_type current_sector;

   typedef double _current_sector_time_type;
  _current_sector_time_type current_sector_time;

   typedef double _current_sector_mean_speed_type;
  _current_sector_mean_speed_type current_sector_mean_speed;





  typedef boost::shared_ptr< ::first_project::sector_time_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::first_project::sector_time_<ContainerAllocator> const> ConstPtr;

}; // struct sector_time_

typedef ::first_project::sector_time_<std::allocator<void> > sector_time;

typedef boost::shared_ptr< ::first_project::sector_time > sector_timePtr;
typedef boost::shared_ptr< ::first_project::sector_time const> sector_timeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::first_project::sector_time_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::first_project::sector_time_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::first_project::sector_time_<ContainerAllocator1> & lhs, const ::first_project::sector_time_<ContainerAllocator2> & rhs)
{
  return lhs.current_sector == rhs.current_sector &&
    lhs.current_sector_time == rhs.current_sector_time &&
    lhs.current_sector_mean_speed == rhs.current_sector_mean_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::first_project::sector_time_<ContainerAllocator1> & lhs, const ::first_project::sector_time_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace first_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::first_project::sector_time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::first_project::sector_time_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::first_project::sector_time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::first_project::sector_time_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::first_project::sector_time_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::first_project::sector_time_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::first_project::sector_time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1faea2573a9ef916b33bea5b9868fa6d";
  }

  static const char* value(const ::first_project::sector_time_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1faea2573a9ef916ULL;
  static const uint64_t static_value2 = 0xb33bea5b9868fa6dULL;
};

template<class ContainerAllocator>
struct DataType< ::first_project::sector_time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "first_project/sector_time";
  }

  static const char* value(const ::first_project::sector_time_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::first_project::sector_time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 current_sector\n"
"float64 current_sector_time\n"
"float64 current_sector_mean_speed\n"
"\n"
;
  }

  static const char* value(const ::first_project::sector_time_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::first_project::sector_time_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_sector);
      stream.next(m.current_sector_time);
      stream.next(m.current_sector_mean_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sector_time_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::first_project::sector_time_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::first_project::sector_time_<ContainerAllocator>& v)
  {
    s << indent << "current_sector: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_sector);
    s << indent << "current_sector_time: ";
    Printer<double>::stream(s, indent + "  ", v.current_sector_time);
    s << indent << "current_sector_mean_speed: ";
    Printer<double>::stream(s, indent + "  ", v.current_sector_mean_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FIRST_PROJECT_MESSAGE_SECTOR_TIME_H
